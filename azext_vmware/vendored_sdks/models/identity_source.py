# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource import Resource


class IdentitySource(Resource):
    """vCenter Single Sign On Identity Source.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar provisioning_state: The state of the identity source provisioning.
     Possible values include: 'Succeeded', 'Failed', 'Updating'
    :vartype provisioning_state: str or
     ~vendored_sdks.models.HcxEnterpriseSiteProvisioningState
    :param identity_source_name: The name of the identity source
    :type identity_source_name: str
    :param alias: The domain's NetBIOS name
    :type alias: str
    :param domain: The domain's dns name
    :type domain: str
    :param base_user_dn: The base distinguished name for users
    :type base_user_dn: str
    :param base_group_dn: The base distinguished name for groups
    :type base_group_dn: str
    :param primary_server: Primary server URL
    :type primary_server: str
    :param secondary_server: Secondary server URL
    :type secondary_server: str
    :param ssl: Protect LDAP communication using SSL certificate (LDAPS).
     Possible values include: 'Enabled', 'Disabled'
    :type ssl: str or ~vendored_sdks.models.SslEnum
    :param username: The ID of an Active Directory user with a minimum of
     read-only access to Base DN for users and group
    :type username: str
    :param password: The password of the Active Directory user with a minimum
     of read-only access to Base DN for users and groups.
    :type password: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'identity_source_name': {'key': 'properties.name', 'type': 'str'},
        'alias': {'key': 'properties.alias', 'type': 'str'},
        'domain': {'key': 'properties.domain', 'type': 'str'},
        'base_user_dn': {'key': 'properties.baseUserDN', 'type': 'str'},
        'base_group_dn': {'key': 'properties.baseGroupDN', 'type': 'str'},
        'primary_server': {'key': 'properties.primaryServer', 'type': 'str'},
        'secondary_server': {'key': 'properties.secondaryServer', 'type': 'str'},
        'ssl': {'key': 'properties.ssl', 'type': 'str'},
        'username': {'key': 'properties.username', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IdentitySource, self).__init__(**kwargs)
        self.provisioning_state = None
        self.identity_source_name = kwargs.get('identity_source_name', None)
        self.alias = kwargs.get('alias', None)
        self.domain = kwargs.get('domain', None)
        self.base_user_dn = kwargs.get('base_user_dn', None)
        self.base_group_dn = kwargs.get('base_group_dn', None)
        self.primary_server = kwargs.get('primary_server', None)
        self.secondary_server = kwargs.get('secondary_server', None)
        self.ssl = kwargs.get('ssl', None)
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)
